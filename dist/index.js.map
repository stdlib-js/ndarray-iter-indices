{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Increments indices in row-major order.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current indices\n* @returns {NonNegativeIntegerArray} updated indices\n*/\nfunction nextRowMajor( ndims, shape, idx ) {\n\tvar i;\n\tvar j;\n\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = ndims-2; i >= 0; i-- ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tidx[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn idx;\n}\n\n/**\n* Increments indices in column-major order.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current indices\n* @returns {NonNegativeIntegerArray} updated indices\n*/\nfunction nextColumnMajor( ndims, shape, idx ) {\n\tvar i;\n\tvar j;\n\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = 1; i < ndims; i++ ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tidx[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns indices for use in indexing into an ndarray having a specified shape.\n*\n* @param {NonNegativeIntegerArray} shape - input shape\n* @param {Options} [options] - function options\n* @param {boolean} [options.order='row-major'] - index iteration order\n* @throws {TypeError} first argument must be an array containing nonnegative integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerIndices( x.shape );\n*\n* var v = iter.next().value;\n* // returns [ 0, 0, 0 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 0, 1 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 1, 0 ]\n*\n* // ...\n*/\nfunction nditerIndices( shape ) {\n\tvar options;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar sh;\n\tvar f;\n\tvar S;\n\tvar N;\n\tvar i;\n\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\topts = {\n\t\t'order': 'row-major'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( !isOrder( options.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a recognized order. Option: `%s`.', 'order', options.order ) );\n\t\t\t}\n\t\t\topts.order = options.order;\n\t\t}\n\t}\n\t// Retrieve the number of dimensions:\n\tndims = shape.length;\n\n\t// Copy the input shape:\n\tsh = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( !isNonNegativeInteger( shape[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t\tsh.push( shape[ i ] );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( sh );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Resolve the dimension in which indices iterate fastest:\n\tif ( opts.order === 'row-major' ) {\n\t\tdim = ndims - 1;\n\t\tf = nextRowMajor;\n\t} else {\n\t\tdim = 0;\n\t\tf = nextColumnMajor;\n\t}\n\tS = sh[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i > 0 ) {\n\t\t\t// Update the index array:\n\t\t\tj = ( idx[ dim ] + 1 ) % S;\n\t\t\tidx[ dim ] = j;\n\t\t\tif ( j === 0 ) {\n\t\t\t\t// If we've iterated over all the elements in the current dimension, move on to the next sub-array:\n\t\t\t\tf( ndims, sh, idx );\n\t\t\t}\n\t\t}\n\t\t// Return the next set of indices:\n\t\treturn {\n\t\t\t'value': idx.slice(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerIndices( sh, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nditerIndices;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns indices for use in indexing into an ndarray having a specified shape.\n*\n* @module @stdlib/ndarray-iter-indices\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var nditerIndices = require( '@stdlib/ndarray-iter-indices' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerIndices( x.shape );\n*\n* var v = iter.next().value;\n* // returns [ 0, 0, 0 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 0, 1 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 1, 0 ]\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isPlainObject", "isOrder", "isCollection", "isNonNegativeInteger", "hasOwnProp", "iteratorSymbol", "zeros", "numel", "format", "nextRowMajor", "ndims", "shape", "idx", "i", "j", "nextColumnMajor", "nditerIndices", "options", "opts", "iter", "FLG", "dim", "sh", "f", "S", "N", "next", "end", "factory", "value", "main"]
}
