{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport zeros from '@stdlib/array-base-zeros';\nimport numel from '@stdlib/ndarray-base-numel';\nimport { assign as nextCartesianIndex } from '@stdlib/ndarray-base-next-cartesian-index';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns indices for use in indexing into an ndarray having a specified shape.\n*\n* @param {NonNegativeIntegerArray} shape - input shape\n* @param {Options} [options] - function options\n* @param {boolean} [options.order='row-major'] - index iteration order\n* @throws {TypeError} first argument must be an array containing nonnegative integers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerIndices( x.shape );\n*\n* var v = iter.next().value;\n* // returns [ 0, 0, 0 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 0, 1 ]\n*\n* v = iter.next().value;\n* // returns [ 0, 1, 0 ]\n*\n* // ...\n*/\nfunction nditerIndices( shape ) {\n\tvar options;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar sh;\n\tvar N;\n\tvar i;\n\n\tif ( !isCollection( shape ) ) {\n\t\tthrow new TypeError( format( '1jtF5', shape ) );\n\t}\n\topts = {\n\t\t'order': 'row-major'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1jt2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tif ( !isOrder( options.order ) ) {\n\t\t\t\tthrow new TypeError( format( '1jt5C', 'order', options.order ) );\n\t\t\t}\n\t\t\topts.order = options.order;\n\t\t}\n\t}\n\t// Retrieve the number of dimensions:\n\tndims = shape.length;\n\n\t// Copy the input shape:\n\tsh = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( !isNonNegativeInteger( shape[ i ] ) ) {\n\t\t\tthrow new TypeError( format( '1jtF5', shape ) );\n\t\t}\n\t\tsh.push( shape[ i ] );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( sh );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Resolve the dimension in which indices iterate fastest:\n\tif ( opts.order === 'row-major' ) {\n\t\tdim = ndims - 1;\n\t} else {\n\t\tdim = 0;\n\t}\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array:\n\tidx = zeros( ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i > 0 ) {\n\t\t\tidx = nextCartesianIndex( shape, opts.order, idx, dim, idx );\n\t\t}\n\t\t// Return the next set of indices:\n\t\treturn {\n\t\t\t'value': idx.slice(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerIndices( sh, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerIndices;\n"],"names":["nditerIndices","shape","options","ndims","opts","iter","FLG","idx","dim","sh","N","i","isCollection","TypeError","format","order","arguments","length","isPlainObject","hasOwnProp","isOrder","isNonNegativeInteger","push","numel","zeros","setReadOnly","done","nextCartesianIndex","value","slice","iteratorSymbol"],"mappings":";;imCAmEA,SAASA,EAAeC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAcX,GACnB,MAAM,IAAIY,UAAWC,EAAQ,QAASb,IAKvC,GAHAG,EAAO,CACNW,MAAS,aAELC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNhB,EAAUc,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,QAASZ,IAEvC,GAAKiB,EAAYjB,EAAS,SAAY,CACrC,IAAMkB,EAASlB,EAAQa,OACtB,MAAM,IAAIF,UAAWC,EAAQ,QAAS,QAASZ,EAAQa,QAExDX,EAAKW,MAAQb,EAAQa,KACrB,CACD,CAMD,IAJAZ,EAAQF,EAAMgB,OAGdR,EAAK,GACCE,EAAI,EAAGA,EAAIR,EAAOQ,IAAM,CAC7B,IAAMU,EAAsBpB,EAAOU,IAClC,MAAM,IAAIE,UAAWC,EAAQ,QAASb,IAEvCQ,EAAGa,KAAMrB,EAAOU,GAChB,CA2BD,OAxBW,KADXD,EAAIa,EAAOd,MAEVH,GAAM,GAINE,EADmB,cAAfJ,EAAKW,MACHZ,EAAQ,EAER,EAGPQ,GAAK,EAGLJ,EAAMiB,EAAOrB,GAIbsB,EADApB,EAAO,CAAA,EACY,QAenB,WAEC,GADAM,GAAK,EACAL,GAAOK,GAAKD,EAChB,MAAO,CACNgB,MAAQ,GAGLf,EAAI,IACRJ,EAAMoB,EAAoB1B,EAAOG,EAAKW,MAAOR,EAAKC,EAAKD,IAGxD,MAAO,CACNqB,MAASrB,EAAIsB,QACbH,MAAQ,EAET,IA7BDD,EAAapB,EAAM,UAsCnB,SAAcuB,GAEb,GADAtB,GAAM,EACDU,UAAUC,OACd,MAAO,CACNW,MAASA,EACTF,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA9CII,GACJL,EAAapB,EAAMyB,GAqDpB,WACC,OAAO9B,EAAeS,EAAIL,EAC1B,IArDMC,CAsDR"}